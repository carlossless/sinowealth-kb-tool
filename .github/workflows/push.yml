name: Test & Build

on: [push]

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  nix-build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: cachix/install-nix-action@v31
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
    - uses: cachix/cachix-action@v14
      with:
        name: sinowealth-kb-tool
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
    - name: Build
      run: nix build

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: test-cargo-registry
      - name: Lint
        run: cargo fmt -- --check

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: test-cargo-registry
      - name: Install and configure dependencies
        run: |
          sudo apt-get install -qq libusb-1.0.0-dev
      - name: Run tests
        run: cargo test --bins --verbose

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: x86_64-unknown-linux-gnu
            ARCH: amd64
            OS: ubuntu-latest
            HOST: x86_64-linux-gnu
          - TARGET: aarch64-unknown-linux-gnu
            ARCH: arm64
            OS: ubuntu-latest
            HOST: aarch64-linux-gnu
          - TARGET: riscv64gc-unknown-linux-gnu
            ARCH: riscv64
            OS: ubuntu-latest
            HOST: riscv64-linux-gnu
          - TARGET: x86_64-apple-darwin
            ARCH: amd64
            OS: macos-latest
          - TARGET: aarch64-apple-darwin
            ARCH: arm64
            OS: macos-latest
          - TARGET: x86_64-pc-windows-msvc
            ARCH: amd64
            OS: windows-latest
          - TARGET: aarch64-pc-windows-msvc
            ARCH: arm64
            OS: windows-latest
    needs: test
    runs-on: ${{ matrix.OS }}
    env:
      NAME: sinowealth-kb-tool
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v4
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: Checkout libusb source
        uses: actions/checkout@v4
        with:
          repository: libusb/libusb
          path: libusb
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we do cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get install -qq \
              autoconf \
              automake \
              libtool \
              pkg-config \
              libudev-dev \
              libusb-1.0-0-dev

            mkdir -p build-${{ matrix.ARCH }}
            cd build-${{ matrix.ARCH }}

            ../libusb/bootstrap.sh
            ../libusb/configure \
              --host=${{ matrix.HOST }} \
              --prefix=$PWD/install \
              PKG_CONFIG_LIBDIR=$PWD/install/lib/pkgconfig

            make -j$(nproc)
            make install
          fi
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: cargo build --release --verbose --target $TARGET
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$EXEC ./$EXEC
          tar -czf ./artifacts/$NAME-$TARGET-$TAG.tar.gz $EXEC
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ matrix.TARGET }}
          path: |
            ./artifacts

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: result-*
          merge-multiple: true
          path: ./artifacts
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          files: ./artifacts/*.tar.gz
